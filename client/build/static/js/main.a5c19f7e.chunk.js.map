{"version":3,"sources":["common/hooks/use-status.js","common/components/center-card/CenterCard.element.jsx","common/components/center-card/index.js","common/hooks/use-is-admin.js","common/components/update-status-button/index.js","common/components/update-status-button/UpdateStatusButton.component.jsx","use-cases/vote/screens/no-vote/index.js","use-cases/vote/screens/no-vote/NoVote.screen.jsx","use-cases/vote/screens/cast-vote/components/candidate-list/CandidateList.component.jsx","use-cases/vote/screens/cast-vote/components/candidate-list/index.js","use-cases/vote/screens/cast-vote/index.js","use-cases/vote/screens/cast-vote/CastVote.screen.jsx","use-cases/vote/screens/awaiting-result/index.js","use-cases/vote/screens/awaiting-result/AwaitingResult.screen.jsx","use-cases/vote/screens/result/Result.screen.jsx","use-cases/vote/screens/waiting-room/index.js","use-cases/vote/screens/waiting-room/WaitingRoom.screen.jsx","use-cases/vote/index.js","use-cases/vote/Vote.jsx","use-cases/admin/screens/raw-result/RawResult.screen.jsx","use-cases/admin/screens/raw-result/index.js","use-cases/admin/screens/create-vote-session/components/candidate-fields/CandidateFields.component.jsx","use-cases/admin/screens/create-vote-session/components/candidate-fields/index.js","use-cases/admin/screens/create-vote-session/CreateVoteSession.screen.jsx","use-cases/admin/screens/create-vote-session/index.js","use-cases/admin/screens/approve-users/ApproveUsers.screen.jsx","use-cases/admin/screens/approve-users/index.js","use-cases/admin/index.js","use-cases/admin/Admin.jsx","app/components/header-actions/HeaderActions.component.jsx","app/components/header-actions/index.js","app/index.js","app/App.jsx","index.js"],"names":["StatusContext","createContext","StatusContextWrapper","children","me","useGammaMe","useState","status","setStatus","loading","setLoading","update","useCallback","axios","get","then","response","data","catch","error","state","userLoaded","useEffect","Object","keys","length","Provider","value","useStatus","useContext","BodyContainer","styled","div","CenterCard","title","body","buttons","Card","margin","size","minWidth","minHeight","CardHeader","CardTitle","text","CardBody","CardButtons","reverseDirection","useIsAdmin","voteIT","admin","UpdateStatusButton","updateStatus","updateDisabled","setUpdateDisabled","setTimeout","onClick","primary","outlined","disabled","maxWidth","NoVote","history","useHistory","raised","push","Text","Grid","CandidateList","innerInputs","candidatesChoosen","useMemo","reduce","n","candidate","choosen","JSON","stringify","lowestVacantIndex","vacantCandidate","find","filter","vacant","id","map","i","Fragment","key","label","name","maximumNbrOfVotes","CastVote","useDigitToast","queueToast","candidates","titleText","electionName","submitText","onSubmit","values","vote","post","console","log","initialValues","vacants","keysOrder","keysComponentData","component","array","formFieldArrayOptions","inputs","AwaitingResult","useDigitDialog","showDialog","description","confirmButtonText","cancelButtonText","onConfirm","votesReceived","eligibleVoters","Container","WinnerContainer","Result","Heading4","winners","winner","width","height","alignContent","justifyContent","bold","WaitingRoom","Vote","userVoted","RawResult","rawResult","setRawResult","votesCount","rawVotes","CandidateFields","remove","gridColumn","start","end","upperLabel","icon","Delete","CreateVoteSession","bottom","maxCandidates","max_candidates","DigitTextField","componentProps","numbersOnly","DigitCheckbox","HeadingContainer","ApproveUsers","users","setUsers","updateNotApprovedUsers","user","firstName","nick","lastName","acceptanceYear","Check","approveUser","Admin","path","handleCustomOptionsOnClick","item","HeaderActions","signOut","customOptionsOnClick","customOptions","adminApproveVoters","customOrder","App","useGamma","window","onfocus","headerRowProps","flex","renderHeader","toolbarHeight","renderMain","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a5c19f7e.chunk.js","sourcesContent":["import React, {\n    createContext,\n    useContext,\n    useState,\n    useCallback,\n    useEffect,\n} from \"react\";\nimport axios from \"axios\";\nimport { useGammaMe } from \"@cthit/react-digit-components\";\n\nconst StatusContext = createContext([]);\n\nfunction useStatus() {\n    const [status, update] = useContext(StatusContext);\n\n    return [status, update];\n}\n\nconst StatusContextWrapper = ({ children }) => {\n    const me = useGammaMe();\n    const [status, setStatus] = useState({});\n    const [loading, setLoading] = useState(false);\n\n    const update = useCallback(() => {\n        if (loading) {\n            return;\n        }\n        setLoading(true);\n        axios\n            .get(\"/api/status\")\n            .then(response => {\n                setStatus(response.data);\n                setLoading(false);\n            })\n            .catch(error => {\n                if (error.response.data === \"You cannot vote yet\") {\n                    setStatus({ state: \"notApproved\" });\n                    setLoading(false);\n                }\n            });\n    }, [setStatus, loading, setLoading]);\n\n    const userLoaded = me != null;\n\n    useEffect(() => {\n        if (userLoaded && Object.keys(status).length === 0) {\n            update();\n        }\n    }, [userLoaded, status, update]);\n\n    return (\n        <StatusContext.Provider value={[status, update]}>\n            {children}\n        </StatusContext.Provider>\n    );\n};\n\nexport default useStatus;\nexport { StatusContextWrapper };\n","import React from \"react\";\nimport { DigitDesign } from \"@cthit/react-digit-components\";\nimport styled from \"styled-components\";\n\nconst BodyContainer = styled.div`\n    display: grid;\n    grid-template-columns: auto;\n    grid-auto-rows: auto;\n    grid-gap: 1rem;\n`;\n\nconst CenterCard = ({ title, body, buttons }) => {\n    return (\n        <DigitDesign.Card\n            margin={\"auto\"}\n            size={{ minWidth: \"200px\", minHeight: \"200px\" }}\n        >\n            <DigitDesign.CardHeader>\n                <DigitDesign.CardTitle text={title} />\n            </DigitDesign.CardHeader>\n            <DigitDesign.CardBody>\n                <BodyContainer>{body}</BodyContainer>\n            </DigitDesign.CardBody>\n            <DigitDesign.CardButtons reverseDirection>\n                {buttons}\n            </DigitDesign.CardButtons>\n        </DigitDesign.Card>\n    );\n};\n\nexport default CenterCard;\n","import CenterCard from \"./CenterCard.element\";\nexport default CenterCard;\n","import { useGammaMe } from \"@cthit/react-digit-components\";\n\nfunction useIsAdmin() {\n    const me = useGammaMe();\n    if (me == null) {\n        return false;\n    }\n    return me.voteIT.admin;\n}\n\nexport default useIsAdmin;\n","import UpdateStatusButton from \"./UpdateStatusButton.component\";\nexport default UpdateStatusButton;\n","import React, { useState, useEffect } from \"react\";\nimport useStatus from \"../../hooks/use-status\";\nimport { DigitButton } from \"@cthit/react-digit-components\";\n\nconst UpdateStatusButton = () => {\n    const [, updateStatus] = useStatus();\n    const [updateDisabled, setUpdateDisabled] = useState(false);\n\n    useEffect(() => {\n        if (updateDisabled) {\n            setTimeout(() => {\n                setUpdateDisabled(false);\n            }, 1000);\n        }\n    }, [updateDisabled, setUpdateDisabled]);\n\n    return (\n        <DigitButton\n            text={\"Update\"}\n            onClick={() => {\n                updateStatus();\n                setUpdateDisabled(true);\n            }}\n            primary\n            outlined\n            disabled={updateDisabled}\n            size={{ maxWidth: \"300px\" }}\n        />\n    );\n};\n\nexport default UpdateStatusButton;\n","import NoVote from \"./NoVote.screen\";\nexport default NoVote;","import React from \"react\";\nimport CenterCard from \"../../../../common/components/center-card\";\nimport useIsAdmin from \"../../../../common/hooks/use-is-admin\";\nimport { useHistory } from \"react-router-dom\";\nimport { DigitButton, DigitText } from \"@cthit/react-digit-components\";\nimport UpdateStatusButton from \"../../../../common/components/update-status-button\";\n\nconst NoVote = () => {\n    const admin = useIsAdmin();\n    const history = useHistory();\n\n    const buttons = admin ? (\n        <>\n            <DigitButton\n                primary\n                raised\n                text={\"Create vote session\"}\n                onClick={() => history.push(\"/admin/create-vote-session\")}\n            />\n            <UpdateStatusButton />\n        </>\n    ) : null;\n\n    const body = (\n        <DigitText.Text\n            text={\"There is no election at this time, try again later.\"}\n        />\n    );\n\n    return <CenterCard title={\"No vote\"} buttons={buttons} body={body} />;\n};\n\nexport default NoVote;\n","import React, { useMemo } from \"react\";\nimport styled from \"styled-components\";\nimport { DigitCheckbox } from \"@cthit/react-digit-components\";\nimport useStatus from \"../../../../../../common/hooks/use-status\";\nimport find from \"lodash/find\";\n\nconst Grid = styled.div`\n    display: grid;\n    grid-template-columns: auto;\n    grid-auto-rows: auto;\n`;\n\nconst CandidateList = ({ value, innerInputs }) => {\n    const [status] = useStatus();\n    const candidatesChoosen = useMemo(\n        () =>\n            value.reduce((n, candidate) => (candidate.choosen ? n + 1 : n), 0),\n        /*eslint-disable */\n        [JSON.stringify(value)] //Stringify is neccessary since just using value won't update properly\n    );\n    /*eslint-enable */\n\n    const lowestVacantIndex = useMemo(() => {\n        const vacantCandidate = find(\n            value.filter(candidate => candidate.vacant),\n            [\"choosen\", false]\n        );\n\n        return vacantCandidate == null ? -1 : vacantCandidate.id;\n        /*eslint-disable */\n    }, [JSON.stringify(value)]);\n    /*eslint-enable */\n\n    return (\n        <Grid>\n            {value.map((candidate, i) => (\n                <React.Fragment key={i} /*Don't use index*/>\n                    <DigitCheckbox\n                        primary\n                        {...innerInputs[i].choosen}\n                        label={candidate.name}\n                        disabled={\n                            (status.maximumNbrOfVotes === candidatesChoosen &&\n                                !candidate.choosen) ||\n                            (!candidate.choosen &&\n                                candidate.vacant &&\n                                candidate.id > lowestVacantIndex)\n                        }\n                    />\n                </React.Fragment>\n            ))}\n        </Grid>\n    );\n};\n\nexport default CandidateList;\n","import CandidateList from \"./CandidateList.component\";\nexport default CandidateList;\n","import CastVote from \"./CastVote.screen\";\nexport default CastVote;","import React from \"react\";\nimport {\n    DigitEditDataCard,\n    useDigitToast,\n} from \"@cthit/react-digit-components\";\nimport useStatus from \"../../../../common/hooks/use-status\";\nimport CandidateList from \"./components/candidate-list\";\nimport axios from \"axios\";\n\nconst CastVote = () => {\n    const [status, updateStatus] = useStatus();\n    const [queueToast] = useDigitToast();\n\n    if (status.candidates == null) {\n        return null;\n    }\n\n    return (\n        <DigitEditDataCard\n            margin={\"auto\"}\n            titleText={status.electionName}\n            submitText={\"Vote\"}\n            onSubmit={values => {\n                const vote = values.candidates\n                    .filter(candidate => candidate.choosen)\n                    .map(candidate => candidate.id);\n\n                axios\n                    .post(\"/api/vote\", { vote })\n                    .then(() => {\n                        queueToast({ text: \"You have voted!\" });\n                        updateStatus();\n                    })\n                    .catch(error => {\n                        queueToast({\n                            text:\n                                \"Something went wrong when voting... Please contact one of the counters.\",\n                        });\n                        console.log(error);\n                    });\n            }}\n            initialValues={{\n                candidates: [\n                    ...status.candidates,\n                    ...status.vacants,\n                ].map(candidate => ({ ...candidate, choosen: false })),\n            }}\n            keysOrder={[\"candidates\"]}\n            keysComponentData={{\n                candidates: {\n                    component: CandidateList,\n                    array: true,\n                    formFieldArrayOptions: {\n                        inputs: [\"choosen\"],\n                    },\n                },\n            }}\n        />\n    );\n};\n\nexport default CastVote;\n","import AwaitingResult from \"./AwaitingResult.screen\";\nexport default AwaitingResult;","import React from \"react\";\nimport CenterCard from \"../../../../common/components/center-card\";\nimport useStatus from \"../../../../common/hooks/use-status\";\nimport {\n    DigitText,\n    DigitButton,\n    useDigitDialog,\n} from \"@cthit/react-digit-components\";\nimport useIsAdmin from \"../../../../common/hooks/use-is-admin\";\nimport axios from \"axios\";\nimport UpdateStatusButton from \"../../../../common/components/update-status-button\";\n\nconst AwaitingResult = () => {\n    const admin = useIsAdmin();\n    const [status, updateStatus] = useStatus();\n    const [showDialog] = useDigitDialog();\n\n    const buttons = (\n        <>\n            {admin && (\n                <DigitButton\n                    text={\"End voting\"}\n                    onClick={() => {\n                        showDialog({\n                            title: \"Are you sure?\",\n                            description:\n                                \"This will end the current voting session\",\n                            confirmButtonText: \"End voting\",\n                            cancelButtonText: \"Cancel\",\n                            onConfirm: () =>\n                                axios\n                                    .post(\"/api/complete\")\n                                    .then(response => updateStatus()),\n                        });\n                    }}\n                    primary\n                    outlined\n                />\n            )}\n            {<UpdateStatusButton />}\n        </>\n    );\n\n    const body = (\n        <>\n            <DigitText.Text text={\"Votes recieved: \" + status.votesReceived} />\n            <DigitText.Text\n                text={\"Eligible voters: \" + status.eligibleVoters}\n            />\n        </>\n    );\n\n    return (\n        <CenterCard\n            title={\"Awaiting result...\"}\n            body={body}\n            buttons={buttons}\n        />\n    );\n};\n\nexport default AwaitingResult;\n","import React from \"react\";\nimport styled from \"styled-components\";\nimport useStatus from \"../../../../common/hooks/use-status\";\nimport {\n    DigitDesign,\n    DigitText,\n    DigitButton,\n} from \"@cthit/react-digit-components\";\nimport useIsAdmin from \"../../../../common/hooks/use-is-admin\";\nimport { useHistory } from \"react-router-dom\";\nimport UpdateStatusButton from \"../../../../common/components/update-status-button\";\n\nconst Container = styled.div`\n    display: flex;\n    flex-direction: column;\n\n    margin: auto;\n\n    max-width: 650px;\n`;\n\nconst WinnerContainer = styled.div`\n    width: 100%;\n\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n\n    justify-content: center;\n    align-content: center;\n`;\n\nconst Result = () => {\n    const [status] = useStatus();\n    const history = useHistory();\n    const admin = useIsAdmin();\n\n    if (status == null) {\n        return null;\n    }\n\n    return (\n        <Container>\n            <DigitText.Heading4 text={\"Results:\"} />\n            <WinnerContainer>\n                {status.winners.map(winner => (\n                    <DigitDesign.Card\n                        key={winner.id}\n                        margin={\"1rem\"}\n                        size={{ width: \"200px\", height: \"200px\" }}\n                    >\n                        <DigitDesign.CardBody\n                            alignContent={\"center\"}\n                            justifyContent={\"center\"}\n                        >\n                            <DigitText.Text bold text={winner.name} />\n                        </DigitDesign.CardBody>\n                    </DigitDesign.Card>\n                ))}\n            </WinnerContainer>\n            {!admin && <UpdateStatusButton />}\n            {admin && (\n                <DigitButton\n                    text={\"View raw results\"}\n                    outlined\n                    onClick={() => history.push(\"/admin/raw-result\")}\n                    size={{ maxWidth: \"300px\" }}\n                />\n            )}\n            {admin && (\n                <DigitButton\n                    text={\"Create new vote session\"}\n                    outlined\n                    onClick={() => history.push(\"/admin/create-vote-session\")}\n                    size={{ maxWidth: \"300px\" }}\n                />\n            )}\n        </Container>\n    );\n};\n\nexport default Result;\n","import WaitingRoom from \"./WaitingRoom.screen\";\nexport default WaitingRoom;\n","import React from \"react\";\nimport CenterCard from \"../../../../common/components/center-card\";\nimport { DigitText } from \"@cthit/react-digit-components\";\nimport UpdateStatusButton from \"../../../../common/components/update-status-button\";\n\nconst WaitingRoom = () => {\n    const body = (\n        <DigitText.Text\n            text={\"You have not yet been approved by the meetings counters.\"}\n        />\n    );\n\n    const buttons = <UpdateStatusButton />;\n\n    return (\n        <CenterCard title={\"Not approved yet\"} body={body} buttons={buttons} />\n    );\n};\n\nexport default WaitingRoom;\n","import Vote from \"./Vote\";\nexport default Vote;","import React from \"react\";\nimport useStatus from \"../../common/hooks/use-status\";\nimport NoVote from \"./screens/no-vote\";\nimport CastVote from \"./screens/cast-vote\";\nimport AwaitingResult from \"./screens/awaiting-result\";\nimport Result from \"./screens/result/Result.screen\";\nimport WaitingRoom from \"./screens/waiting-room\";\n\nconst Vote = () => {\n    const [status] = useStatus();\n\n    if (status.state === \"notApproved\") {\n        return <WaitingRoom />;\n    }\n\n    if (status.state === \"noVote\") {\n        return <NoVote />;\n    }\n\n    if (status.userVoted) {\n        return <AwaitingResult />;\n    }\n\n    if (status.state === \"vote\") {\n        return <CastVote />;\n    }\n\n    if (status.state === \"result\") {\n        return <Result />;\n    }\n\n    return <div>loading...</div>;\n};\n\nexport default Vote;\n","import React, { useState, useEffect } from \"react\";\nimport axios from \"axios\";\nimport styled from \"styled-components\";\nimport { DigitButton, DigitText } from \"@cthit/react-digit-components\";\nimport { useHistory } from \"react-router-dom\";\n\nconst Container = styled.div`\n    display: flex;\n    flex-direction: column;\n\n    margin: auto;\n\n    max-width: 500px;\n`;\n\nconst RawResult = () => {\n    const history = useHistory();\n    const [rawResult, setRawResult] = useState(null);\n\n    useEffect(() => {\n        axios.get(\"/api/result\").then(response => setRawResult(response.data));\n    }, []);\n\n    return (\n        <Container>\n            <DigitButton\n                outlined\n                text={\"Back\"}\n                onClick={() => history.push(\"/\")}\n            />\n            <DigitText.Heading4 text={\"Raw results\"} />\n            {rawResult != null && (\n                <>\n                    <div>\n                        votesCount: {JSON.stringify(rawResult.votesCount)}\n                    </div>\n                    <div>--------------------</div>\n                    <div>rawVotes: {JSON.stringify(rawResult.rawVotes)}</div>\n                </>\n            )}\n        </Container>\n    );\n};\n\nexport default RawResult;\n","import RawResult from \"./RawResult.screen\";\nexport default RawResult;","import React from \"react\";\nimport {\n    DigitTextField,\n    DigitButton,\n    DigitIconButton,\n} from \"@cthit/react-digit-components\";\nimport styled from \"styled-components\";\nimport Delete from \"@material-ui/icons/Delete\";\n\nconst Grid = styled.div`\n    display: grid;\n    grid-template-columns: auto auto;\n    grid-auto-columns: auto;\n    grid-gap: 1rem;\n`;\n\nconst CandidateFields = ({ innerInputs, push, remove }) => {\n    return (\n        <Grid>\n            <DigitButton\n                text={\"Add option\"}\n                primary\n                outlined\n                onClick={() => push({ name: \"\" })}\n                gridColumn={{ start: \"1\", end: \"-1\" }}\n            />\n            {innerInputs.map(({ name }, i) => (\n                <React.Fragment key={i} /*Shouldn't be an index*/>\n                    <DigitTextField\n                        {...name}\n                        outlined\n                        upperLabel={\"Option \" + (i + 1)}\n                    />\n                    <DigitIconButton icon={Delete} onClick={() => remove(i)} />\n                </React.Fragment>\n            ))}\n        </Grid>\n    );\n};\n\nexport default CandidateFields;\n","import CandidateFields from \"./CandidateFields.component\";\nexport default CandidateFields;\n","import React, { useEffect } from \"react\";\nimport axios from \"axios\";\nimport {\n    DigitButton,\n    DigitEditDataCard,\n    DigitTextField,\n    DigitCheckbox,\n    useDigitToast,\n    useDigitDialog,\n} from \"@cthit/react-digit-components\";\nimport { useHistory } from \"react-router-dom\";\nimport CandidateFields from \"./components/candidate-fields\";\nimport useStatus from \"../../../../common/hooks/use-status\";\nimport styled from \"styled-components\";\n\nconst Container = styled.div`\n    display: flex;\n    flex-direction: column;\n\n    margin: auto;\n`;\n\nconst CreateVoteSession = () => {\n    const [status, updateStatus] = useStatus();\n    const history = useHistory();\n    const [queueToast] = useDigitToast();\n    const [showDialog] = useDigitDialog();\n\n    useEffect(() => {\n        if (status.state === \"vote\") {\n            queueToast({ text: \"A voting session has already been started\" });\n            updateStatus();\n            history.push(\"/\");\n        }\n    }, [status.state, history, updateStatus, queueToast]);\n\n    return (\n        <Container>\n            <DigitButton\n                margin={{ bottom: \"1rem\" }}\n                outlined\n                onClick={() => history.push(\"/\")}\n                text={\"Back\"}\n            />\n            <DigitEditDataCard\n                onSubmit={({\n                    electionName,\n                    candidates,\n                    maxCandidates,\n                    vacant,\n                }) => {\n                    showDialog({\n                        title: \"Are you sure?\",\n                        description:\n                            \"This will start a new voting session immediately\",\n                        confirmButtonText: \"Start voting session\",\n                        cancelButtonText: \"Cancel\",\n                        onConfirm: () =>\n                            axios\n                                .post(\"/api/create-vote-session\", {\n                                    candidates: candidates.map(\n                                        candidate => candidate.name\n                                    ),\n                                    vacant,\n                                    max_candidates: maxCandidates,\n                                    electionName,\n                                })\n                                .then(() => {\n                                    updateStatus();\n                                    history.push(\"/\");\n                                })\n                                .catch(error =>\n                                    queueToast({\n                                        text: error.response.data,\n                                    })\n                                ),\n                    });\n                }}\n                margin={\"auto\"}\n                titleText={\"Create vote session\"}\n                submitText={\"Start vote session\"}\n                keysOrder={[\n                    \"electionName\",\n                    \"maxCandidates\",\n                    \"vacant\",\n                    \"candidates\",\n                ]}\n                initialValues={{\n                    electionName: \"Val av ledamöter\",\n                    maxCandidates: 1,\n                    vacant: false,\n                    candidates: [{ name: \"\" }, { name: \"\" }],\n                }}\n                keysComponentData={{\n                    electionName: {\n                        component: DigitTextField,\n                        componentProps: {\n                            upperLabel: \"Name of the election\",\n                            outlined: true,\n                        },\n                    },\n                    maxCandidates: {\n                        component: DigitTextField,\n                        componentProps: {\n                            numbersOnly: true,\n                            upperLabel: \"Max selections per vote\",\n                            outlined: true,\n                        },\n                    },\n                    vacant: {\n                        component: DigitCheckbox,\n                        componentProps: {\n                            primary: true,\n                            label: \"Vacant enabled\",\n                        },\n                    },\n                    candidates: {\n                        component: CandidateFields,\n                        array: true,\n                        formFieldArrayOptions: {\n                            //TODO: Use instead user id so that online voting can become easier. Meaning you can use avatar url.\n                            inputs: [\"name\"],\n                        },\n                    },\n                }}\n            />\n        </Container>\n    );\n};\n\nexport default CreateVoteSession;\n","import CreateVoteSession from \"./CreateVoteSession.screen\";\nexport default CreateVoteSession;","import React, { useState, useCallback, useEffect } from \"react\";\nimport axios from \"axios\";\nimport styled from \"styled-components\";\nimport Check from \"@material-ui/icons/Check\";\nimport {\n    DigitText,\n    DigitIconButton,\n    DigitButton,\n    useDigitToast,\n} from \"@cthit/react-digit-components\";\nimport { useHistory } from \"react-router-dom\";\n\nconst Grid = styled.div`\n    display: grid;\n    grid-template-columns: auto min-content;\n    grid-auto-rows: auto;\n    grid-gap: 1rem;\n\n    align-items: center;\n\n    margin: auto;\n    justify-content: center;\n    align-content: center;\n`;\n\nconst HeadingContainer = styled.div`\n    grid-column-start: 1;\n    grid-column-end: -1;\n`;\n\nconst ApproveUsers = () => {\n    const history = useHistory();\n    const [users, setUsers] = useState();\n    const [queueToast] = useDigitToast();\n\n    const updateNotApprovedUsers = useCallback(() => {\n        axios\n            .get(\"/api/not-approved\")\n            .then(response => setUsers(response.data));\n    }, [setUsers]);\n\n    useEffect(() => {\n        updateNotApprovedUsers();\n    }, [updateNotApprovedUsers]);\n\n    if (users == null) {\n        return null;\n    }\n\n    const approveUser = user =>\n        axios\n            .post(\"/api/approve-user\", { id: user.id })\n            .then(() => updateNotApprovedUsers());\n\n    return (\n        <Grid>\n            <DigitButton\n                text={\"Back\"}\n                onClick={() => history.push(\"/\")}\n                outlined\n                gridColumn={{ start: \"1\", end: \"-1\" }}\n            />\n            <HeadingContainer>\n                <DigitText.Heading4\n                    text={\n                        users.length === 0\n                            ? \"No users to approve\"\n                            : \"Non approved users\"\n                    }\n                />\n            </HeadingContainer>\n            <DigitButton\n                text={\"Update\"}\n                onClick={() => updateNotApprovedUsers()}\n                gridColumn={{ start: \"1\", end: \"-1\" }}\n                primary\n                outlined\n            />\n            <DigitButton\n                text={\"Update Gamma cache\"}\n                onClick={() =>\n                    axios\n                        .post(\"/api/update-gamma-cache\")\n                        .then(() => queueToast({ text: \"Gamma cache updated\" }))\n                }\n                gridColumn={{ start: \"1\", end: \"-1\" }}\n                outlined\n            />\n            {users.map(user => (\n                <React.Fragment key={user.id}>\n                    <DigitText.Text\n                        text={\n                            user.firstName +\n                            ' \"' +\n                            user.nick +\n                            '\" ' +\n                            user.lastName +\n                            \" - \" +\n                            user.acceptanceYear\n                        }\n                    />\n                    <DigitIconButton\n                        icon={Check}\n                        onClick={() => approveUser(user)}\n                    />\n                </React.Fragment>\n            ))}\n        </Grid>\n    );\n};\n\nexport default ApproveUsers;\n","import ApproveUsers from \"./ApproveUsers.screen\";\nexport default ApproveUsers;\n","import Admin from \"./Admin\";\nexport default Admin;","import React from \"react\";\nimport { Switch, Route } from \"react-router-dom\";\nimport RawResult from \"./screens/raw-result\";\nimport CreateVoteSession from \"./screens/create-vote-session\";\nimport ApproveUsers from \"./screens/approve-users\";\n\nconst Admin = () => {\n    return (\n        <Switch>\n            <Route path={\"/admin/approve-users\"} component={ApproveUsers} />\n            <Route path={\"/admin/raw-result\"} component={RawResult} />\n            <Route\n                path={\"/admin/create-vote-session\"}\n                component={CreateVoteSession}\n            />\n        </Switch>\n    );\n};\n\nexport default Admin;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { DigitGammaActions } from \"@cthit/react-digit-components\";\nimport useIsAdmin from \"../../../common/hooks/use-is-admin\";\nimport axios from \"axios\";\n\nconst handleCustomOptionsOnClick = history => item => {\n    switch (item) {\n        case \"adminApproveVoters\":\n            history.push(\"/admin/approve-users\");\n            break;\n        default:\n            break;\n    }\n};\n\nconst HeaderActions = () => {\n    const admin = useIsAdmin();\n    const history = useHistory();\n\n    return (\n        <DigitGammaActions\n            signOut={() => axios.post(\"/api/sign-out\")}\n            customOptionsOnClick={handleCustomOptionsOnClick(history)}\n            customOptions={{\n                adminApproveVoters: \"Approve voters\",\n            }}\n            customOrder={\n                admin\n                    ? [\"adminApproveVoters\", \"viewAccount\", \"signOut\"]\n                    : [\"viewAccount\", \"signOut\"]\n            }\n        />\n    );\n};\n\nexport default HeaderActions;\n","import HeaderActions from \"./HeaderActions.component\";\nexport default HeaderActions;\n","import App from \"./App\";\nexport default App;","import React, { useEffect } from \"react\";\nimport { useGamma, DigitHeader } from \"@cthit/react-digit-components\";\nimport { Switch, Route } from \"react-router-dom\";\nimport Vote from \"../use-cases/vote\";\nimport Admin from \"../use-cases/admin\";\nimport HeaderActions from \"./components/header-actions\";\nimport useIsAdmin from \"../common/hooks/use-is-admin\";\nimport useStatus from \"../common/hooks/use-status\";\n\nconst App = () => {\n    const [, updateStatus] = useStatus();\n    const [loading] = useGamma(\"/api/me\", \"/api/code\");\n    const admin = useIsAdmin();\n\n    useEffect(() => {\n        window.onfocus = function () {\n            updateStatus();\n        };\n    }, [updateStatus]);\n\n    if (loading) {\n        return null;\n    }\n\n    return (\n        <DigitHeader\n            title={\"VoteIT\"}\n            headerRowProps={{\n                size: { width: \"100%\" },\n                flex: \"1\",\n                justifyContent: \"space-between\",\n            }}\n            renderHeader={() => <HeaderActions />}\n            toolbarHeight={\"auto\"}\n            renderMain={() => (\n                <Switch>\n                    {admin && <Route path={\"/admin\"} component={Admin} />}\n                    <Route path={\"/\"} component={Vote} />\n                </Switch>\n            )}\n        />\n    );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./app\";\nimport { DigitProviders } from \"@cthit/react-digit-components\";\nimport { StatusContextWrapper } from \"./common/hooks/use-status\";\n\nReactDOM.render(\n    <React.StrictMode>\n        <DigitProviders>\n            <StatusContextWrapper>\n                <App />\n            </StatusContextWrapper>\n        </DigitProviders>\n    </React.StrictMode>,\n    document.getElementById(`root`)\n);\n"],"sourceRoot":""}